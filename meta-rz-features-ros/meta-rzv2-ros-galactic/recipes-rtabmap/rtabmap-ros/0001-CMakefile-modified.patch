diff --git a/CMakeLists.txt b/CMakeLists.txt
index 3acefa1..79fe52f 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -59,7 +59,7 @@ find_package(octomap_msgs)
 ## System dependencies are found with CMake's conventions
 find_package(RTABMap 0.20.20 REQUIRED)
 find_package(Boost REQUIRED COMPONENTS system) # dependencies from PCL
-find_package(PCL 1.7 REQUIRED COMPONENTS kdtree) #This crashes idl generation if all components are found?! see https://github.com/ros2/rosidl/issues/402#issuecomment-565586908
+find_package(PCL 1.7 REQUIRED)
 
 # optional
 find_package(rviz_common)
@@ -347,14 +347,14 @@ ament_target_dependencies(rtabmap_plugins ${Libraries})
 if("$ENV{ROS_DISTRO}" STRGREATER_EQUAL "humble")
   rosidl_get_typesupport_target(cpp_typesupport_target ${PROJECT_NAME} "rosidl_typesupport_cpp")
 
-  target_link_libraries(rtabmap_common ${cpp_typesupport_target} ${RTABMap_LIBRARIES})
-  target_link_libraries(rtabmap_sync rtabmap_common ${cpp_typesupport_targeT} ${RTABMap_LIBRARIES})
-  target_link_libraries(rtabmap_plugins rtabmap_common ${cpp_typesupport_target} ${RTABMap_LIBRARIES})
+  target_link_libraries(rtabmap_common ${cpp_typesupport_target} ${RTABMap_LIBRARIES} ${Boost_LIBRARIES} ${PCL_LIBRARIES})
+  target_link_libraries(rtabmap_sync rtabmap_common ${cpp_typesupport_targeT} ${RTABMap_LIBRARIES} ${Boost_LIBRARIES} ${PCL_LIBRARIES})
+  target_link_libraries(rtabmap_plugins rtabmap_common ${cpp_typesupport_target} ${RTABMap_LIBRARIES} ${Boost_LIBRARIES} ${PCL_LIBRARIES})
 else()
   # foxy, galatic
-  target_link_libraries(rtabmap_common ${RTABMap_LIBRARIES})
-  target_link_libraries(rtabmap_sync rtabmap_common ${RTABMap_LIBRARIES})
-  target_link_libraries(rtabmap_plugins rtabmap_common ${RTABMap_LIBRARIES})
+  target_link_libraries(rtabmap_common ${RTABMap_LIBRARIES} ${Boost_LIBRARIES} ${PCL_LIBRARIES})
+  target_link_libraries(rtabmap_sync rtabmap_common ${RTABMap_LIBRARIES} ${Boost_LIBRARIES} ${PCL_LIBRARIES})
+  target_link_libraries(rtabmap_plugins rtabmap_common ${RTABMap_LIBRARIES} ${Boost_LIBRARIES} ${PCL_LIBRARIES})
 
   rosidl_target_interfaces(rtabmap_common ${PROJECT_NAME} "rosidl_typesupport_cpp")
   rosidl_target_interfaces(rtabmap_sync ${PROJECT_NAME} "rosidl_typesupport_cpp")
@@ -383,16 +383,16 @@ rclcpp_components_register_nodes(rtabmap_sync "rtabmap_ros::CoreWrapper")
 
 add_executable(rtabmap src/CoreNode.cpp)
 ament_target_dependencies(rtabmap ${Libraries})
-target_link_libraries(rtabmap rtabmap_sync rtabmap_common ${RTABMap_LIBRARIES} ${Boost_LIBRARIES} ${PCL_LBRARIES})
+target_link_libraries(rtabmap rtabmap_sync rtabmap_common ${RTABMap_LIBRARIES} ${Boost_LIBRARIES} ${PCL_LIBRARIES})
 
 add_executable(rtabmap_rgbd_odometry src/RGBDOdometryNode.cpp)
 ament_target_dependencies(rtabmap_rgbd_odometry ${Libraries})
-target_link_libraries(rtabmap_rgbd_odometry rtabmap_plugins ${RTABMap_LIBRARIES} ${Boost_LIBRARIES} ${PCL_LBRARIES})
+target_link_libraries(rtabmap_rgbd_odometry rtabmap_plugins ${RTABMap_LIBRARIES} ${Boost_LIBRARIES} ${PCL_LIBRARIES})
 set_target_properties(rtabmap_rgbd_odometry PROPERTIES OUTPUT_NAME "rgbd_odometry")
 
 add_executable(rtabmap_stereo_odometry src/StereoOdometryNode.cpp)
 ament_target_dependencies(rtabmap_stereo_odometry ${Libraries})
-target_link_libraries(rtabmap_stereo_odometry rtabmap_plugins ${RTABMap_LIBRARIES} ${Boost_LIBRARIES} ${PCL_LBRARIES})
+target_link_libraries(rtabmap_stereo_odometry rtabmap_plugins ${RTABMap_LIBRARIES} ${Boost_LIBRARIES} ${PCL_LIBRARIES})
 set_target_properties(rtabmap_stereo_odometry PROPERTIES OUTPUT_NAME "stereo_odometry")
 
 #add_executable(rtabmap_rgbdicp_odometry src/RGBDICPOdometryNode.cpp)
@@ -401,57 +401,57 @@ set_target_properties(rtabmap_stereo_odometry PROPERTIES OUTPUT_NAME "stereo_odo
 
 add_executable(rtabmap_icp_odometry src/ICPOdometryNode.cpp)
 ament_target_dependencies(rtabmap_icp_odometry ${Libraries})
-target_link_libraries(rtabmap_icp_odometry rtabmap_plugins ${RTABMap_LIBRARIES} ${Boost_LIBRARIES} ${PCL_LBRARIES})
+target_link_libraries(rtabmap_icp_odometry rtabmap_plugins ${RTABMap_LIBRARIES} ${Boost_LIBRARIES} ${PCL_LIBRARIES})
 set_target_properties(rtabmap_icp_odometry PROPERTIES OUTPUT_NAME "icp_odometry")
 
 add_executable(rtabmap_rgbd_sync src/RGBDSyncNode.cpp)
 ament_target_dependencies(rtabmap_rgbd_sync ${Libraries})
-target_link_libraries(rtabmap_rgbd_sync rtabmap_plugins ${RTABMap_LIBRARIES})
+target_link_libraries(rtabmap_rgbd_sync rtabmap_plugins ${RTABMap_LIBRARIES} ${Boost_LIBRARIES} ${PCL_LIBRARIES})
 set_target_properties(rtabmap_rgbd_sync PROPERTIES OUTPUT_NAME "rgbd_sync")
 
 add_executable(rtabmap_rgbdx_sync src/RGBDXSyncNode.cpp)
 ament_target_dependencies(rtabmap_rgbdx_sync ${Libraries})
-target_link_libraries(rtabmap_rgbdx_sync rtabmap_plugins ${RTABMap_LIBRARIES})
+target_link_libraries(rtabmap_rgbdx_sync rtabmap_plugins ${RTABMap_LIBRARIES} ${Boost_LIBRARIES} ${PCL_LIBRARIES})
 set_target_properties(rtabmap_rgbdx_sync PROPERTIES OUTPUT_NAME "rgbdx_sync")
 
 add_executable(rtabmap_stereo_sync src/StereoSyncNode.cpp)
 ament_target_dependencies(rtabmap_stereo_sync ${Libraries})
-target_link_libraries(rtabmap_stereo_sync rtabmap_plugins ${RTABMap_LIBRARIES})
+target_link_libraries(rtabmap_stereo_sync rtabmap_plugins ${RTABMap_LIBRARIES} ${Boost_LIBRARIES} ${PCL_LIBRARIES})
 set_target_properties(rtabmap_stereo_sync PROPERTIES OUTPUT_NAME "stereo_sync")
 
 add_executable(rtabmap_rgb_sync src/RGBSyncNode.cpp)
 ament_target_dependencies(rtabmap_rgb_sync ${Libraries})
-target_link_libraries(rtabmap_rgb_sync rtabmap_plugins ${RTABMap_LIBRARIES})
+target_link_libraries(rtabmap_rgb_sync rtabmap_plugins ${RTABMap_LIBRARIES} ${Boost_LIBRARIES} ${PCL_LIBRARIES})
 set_target_properties(rtabmap_rgb_sync PROPERTIES OUTPUT_NAME "rgb_sync")
 
 add_executable(rtabmap_rgbd_relay src/RGBDRelayNode.cpp)
 ament_target_dependencies(rtabmap_rgbd_relay ${Libraries})
-target_link_libraries(rtabmap_rgbd_relay rtabmap_plugins ${RTABMap_LIBRARIES})
+target_link_libraries(rtabmap_rgbd_relay rtabmap_plugins ${RTABMap_LIBRARIES} ${Boost_LIBRARIES} ${PCL_LIBRARIES})
 set_target_properties(rtabmap_rgbd_relay PROPERTIES OUTPUT_NAME "rgbd_relay")
 
 add_executable(rtabmap_point_cloud_xyz src/PointCloudXYZNode.cpp)
 ament_target_dependencies(rtabmap_point_cloud_xyz ${Libraries})
-target_link_libraries(rtabmap_point_cloud_xyz rtabmap_plugins ${RTABMap_LIBRARIES})
+target_link_libraries(rtabmap_point_cloud_xyz rtabmap_plugins ${RTABMap_LIBRARIES} ${Boost_LIBRARIES} ${PCL_LIBRARIES})
 set_target_properties(rtabmap_point_cloud_xyz PROPERTIES OUTPUT_NAME "point_cloud_xyz")
 
 add_executable(rtabmap_point_cloud_xyzrgb src/PointCloudXYZRGBNode.cpp)
 ament_target_dependencies(rtabmap_point_cloud_xyzrgb ${Libraries})
-target_link_libraries(rtabmap_point_cloud_xyzrgb rtabmap_plugins ${RTABMap_LIBRARIES})
+target_link_libraries(rtabmap_point_cloud_xyzrgb rtabmap_plugins ${RTABMap_LIBRARIES} ${Boost_LIBRARIES} ${PCL_LIBRARIES})
 set_target_properties(rtabmap_point_cloud_xyzrgb PROPERTIES OUTPUT_NAME "point_cloud_xyzrgb")
 
 add_executable(rtabmap_obstacles_detection src/ObstaclesDetectionNode.cpp)
 ament_target_dependencies(rtabmap_obstacles_detection ${Libraries})
-target_link_libraries(rtabmap_obstacles_detection rtabmap_plugins ${RTABMap_LIBRARIES})
+target_link_libraries(rtabmap_obstacles_detection rtabmap_plugins ${RTABMap_LIBRARIES} ${Boost_LIBRARIES} ${PCL_LIBRARIES})
 set_target_properties(rtabmap_obstacles_detection PROPERTIES OUTPUT_NAME "obstacles_detection")
 
 add_executable(rtabmap_point_cloud_aggregator src/PointCloudAggregatorNode.cpp)
 ament_target_dependencies(rtabmap_point_cloud_aggregator ${Libraries})
-target_link_libraries(rtabmap_point_cloud_aggregator rtabmap_plugins ${RTABMap_LIBRARIES})
+target_link_libraries(rtabmap_point_cloud_aggregator rtabmap_plugins ${RTABMap_LIBRARIES} ${Boost_LIBRARIES} ${PCL_LIBRARIES})
 set_target_properties(rtabmap_point_cloud_aggregator PROPERTIES OUTPUT_NAME "point_cloud_aggregator")
 
 add_executable(rtabmap_point_cloud_assembler src/PointCloudAssemblerNode.cpp)
 ament_target_dependencies(rtabmap_point_cloud_assembler ${Libraries})
-target_link_libraries(rtabmap_point_cloud_assembler rtabmap_plugins ${RTABMap_LIBRARIES})
+target_link_libraries(rtabmap_point_cloud_assembler rtabmap_plugins ${RTABMap_LIBRARIES} ${Boost_LIBRARIES} ${PCL_LIBRARIES})
 set_target_properties(rtabmap_point_cloud_assembler PROPERTIES OUTPUT_NAME "point_cloud_assembler")
 
 #add_executable(rtabmap_map_optimizer src/MapOptimizerNode.cpp)
@@ -499,7 +499,7 @@ set_target_properties(rtabmap_point_cloud_assembler PROPERTIES OUTPUT_NAME "poin
 IF(RTABMAP_GUI)
     add_executable(rtabmapviz src/GuiNode.cpp src/GuiWrapper.cpp src/PreferencesDialogROS.cpp)
     ament_target_dependencies(rtabmapviz ${Libraries})
-    target_link_libraries(rtabmapviz rtabmap_sync rtabmap_common ${RTABMap_LIBRARIES} ${Boost_LIBRARIES} ${PCL_LBRARIES} ${QT_LIBRARIES})
+    target_link_libraries(rtabmapviz rtabmap_sync rtabmap_common ${RTABMap_LIBRARIES} ${Boost_LIBRARIES} ${PCL_LIBRARIES} ${QT_LIBRARIES})
     IF(Qt5_FOUND)
         QT5_USE_MODULES(rtabmapviz Widgets Core Gui)
     ENDIF()
@@ -517,7 +517,7 @@ ENDIF()
 
 add_executable(rtabmap_pointcloud_to_depthimage src/PointCloudToDepthImageNode.cpp)
 ament_target_dependencies(rtabmap_pointcloud_to_depthimage ${Libraries})
-target_link_libraries(rtabmap_pointcloud_to_depthimage rtabmap_plugins ${RTABMap_LIBRARIES})
+target_link_libraries(rtabmap_pointcloud_to_depthimage rtabmap_plugins ${RTABMap_LIBRARIES} ${Boost_LIBRARIES} ${PCL_LIBRARIES})
 set_target_properties(rtabmap_pointcloud_to_depthimage PROPERTIES OUTPUT_NAME "pointcloud_to_depthimage")
 
 # Only required when using messages built from the same package
